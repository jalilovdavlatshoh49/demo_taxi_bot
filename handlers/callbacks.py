from aiogram import Router, types, F
from data.storage import ACTIVE_ORDERS, DRIVERS, PENDING_ORDERS
from keyboards.inline import rating_kb
import logging

router = Router()
logger = logging.getLogger(__name__)


# ‚úÖ –í–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–∫–∞–∑
@router.callback_query(F.data.startswith("accept_"))
async def accept_order(callback: types.CallbackQuery):
    try:
        user_id = int(callback.data.split("_")[1])
        driver_id = callback.from_user.id

        if user_id not in PENDING_ORDERS:
            await callback.message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –±–æ–ª—å—à–µ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")
            return

        # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        order_data = PENDING_ORDERS.pop(user_id)

        # –ü–æ–º–µ—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –∑–∞–∫–∞–∑–æ–º —É –≤–æ–¥–∏—Ç–µ–ª—è
        ACTIVE_ORDERS[driver_id] = user_id
        DRIVERS[driver_id]["online"] = False

        logger.info(f"–í–æ–¥–∏—Ç–µ–ª—å {driver_id} –ø—Ä–∏–Ω—è–ª –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        await callback.message.answer("üöó –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑.")
        await callback.bot.send_message(
            user_id,
            f"‚úÖ –í–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–∫–∞–∑!\n"
            f"üöò –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {DRIVERS[driver_id].get('car_model', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üî¢ –ù–æ–º–µ—Ä: {DRIVERS[driver_id].get('car_number', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üìç –î–æ—Å—Ç–∞–≤–ª–µ–Ω", callback_data="delivered")]
            ])
        )
    except Exception as e:
        logger.error(f"[accept_order] –û—à–∏–±–∫–∞: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞.")


# ‚ùå –í–æ–¥–∏—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞–∫–∞–∑
@router.callback_query(F.data.startswith("reject_"))
async def reject_order(callback: types.CallbackQuery):
    try:
        user_id = int(callback.data.split("_")[1])
        driver_id = callback.from_user.id

        await callback.message.answer("üö´ –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–∫–∞–∑.")
        await callback.bot.send_message(user_id, "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à –∑–∞–∫–∞–∑.")

        logger.info(f"–í–æ–¥–∏—Ç–µ–ª—å {driver_id} –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except Exception as e:
        logger.error(f"[reject_order] –û—à–∏–±–∫–∞: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")


# üìç –û—Ç–º–µ—Ç–∫–∞ "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"
@router.callback_query(F.data == "delivered")
async def mark_delivered(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        found = False

        for driver_id, uid in list(ACTIVE_ORDERS.items()):
            if uid == user_id:
                del ACTIVE_ORDERS[driver_id]
                DRIVERS[driver_id]["online"] = True

                await callback.bot.send_message(
                    user_id,
                    "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–µ–∑–¥–∫—É! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è:",
                    reply_markup=rating_kb()
                )

                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ—Ç–∏–ª –¥–æ—Å—Ç–∞–≤–∫—É. –í–æ–¥–∏—Ç–µ–ª—å {driver_id} —Å–Ω–æ–≤–∞ –≤ —Å–µ—Ç–∏.")
                found = True
                break

        if not found:
            await callback.message.answer("‚ö†Ô∏è –î–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logger.error(f"[mark_delivered] –û—à–∏–±–∫–∞: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –¥–æ—Å—Ç–∞–≤–∫–∏.")


# ‚≠ê –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ –≤–æ–¥–∏—Ç–µ–ª—è
@router.callback_query(F.data.startswith("rate_"))
async def handle_rating(callback: types.CallbackQuery):
    try:
        rating = callback.data.split("_")[1]
        await callback.message.answer(f"‚≠ê –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ü–µ–Ω–∫—É: {rating}/5. –°–ø–∞—Å–∏–±–æ!")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–æ—Å—Ç–∞–≤–∏–ª –æ—Ü–µ–Ω–∫—É {rating}")
    except Exception as e:
        logger.error(f"[handle_rating] –û—à–∏–±–∫–∞: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏.")